//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: tracking_server.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// API for an onboard image tracking software.
///
/// Usage: instantiate `Mavsdk_Rpc_TrackingServer_TrackingServerServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_TrackingServer_TrackingServerServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_TrackingServer_TrackingServerServiceClientInterceptorFactoryProtocol? { get }

  func setTrackingPointStatus(
    _ request: Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusRequest, Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusResponse>

  func setTrackingRectangleStatus(
    _ request: Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusRequest, Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusResponse>

  func setTrackingOffStatus(
    _ request: Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusRequest, Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusResponse>

  func subscribeTrackingPointCommand(
    _ request: Mavsdk_Rpc_TrackingServer_SubscribeTrackingPointCommandRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_TrackingServer_TrackingPointCommandResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_TrackingServer_SubscribeTrackingPointCommandRequest, Mavsdk_Rpc_TrackingServer_TrackingPointCommandResponse>

  func subscribeTrackingRectangleCommand(
    _ request: Mavsdk_Rpc_TrackingServer_SubscribeTrackingRectangleCommandRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_TrackingServer_TrackingRectangleCommandResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_TrackingServer_SubscribeTrackingRectangleCommandRequest, Mavsdk_Rpc_TrackingServer_TrackingRectangleCommandResponse>

  func subscribeTrackingOffCommand(
    _ request: Mavsdk_Rpc_TrackingServer_SubscribeTrackingOffCommandRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_TrackingServer_TrackingOffCommandResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_TrackingServer_SubscribeTrackingOffCommandRequest, Mavsdk_Rpc_TrackingServer_TrackingOffCommandResponse>

  func respondTrackingPointCommand(
    _ request: Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandRequest, Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandResponse>

  func respondTrackingRectangleCommand(
    _ request: Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandRequest, Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandResponse>

  func respondTrackingOffCommand(
    _ request: Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandRequest, Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandResponse>
}

extension Mavsdk_Rpc_TrackingServer_TrackingServerServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.tracking_server.TrackingServerService"
  }

  /// Set/update the current point tracking status.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetTrackingPointStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setTrackingPointStatus(
    _ request: Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusRequest, Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.tracking_server.TrackingServerService/SetTrackingPointStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetTrackingPointStatusInterceptors() ?? []
    )
  }

  /// Set/update the current rectangle tracking status.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetTrackingRectangleStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setTrackingRectangleStatus(
    _ request: Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusRequest, Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.tracking_server.TrackingServerService/SetTrackingRectangleStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetTrackingRectangleStatusInterceptors() ?? []
    )
  }

  /// Set the current tracking status to off.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetTrackingOffStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setTrackingOffStatus(
    _ request: Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusRequest, Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.tracking_server.TrackingServerService/SetTrackingOffStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetTrackingOffStatusInterceptors() ?? []
    )
  }

  /// Subscribe to incoming tracking point command.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeTrackingPointCommand.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeTrackingPointCommand(
    _ request: Mavsdk_Rpc_TrackingServer_SubscribeTrackingPointCommandRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_TrackingServer_TrackingPointCommandResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_TrackingServer_SubscribeTrackingPointCommandRequest, Mavsdk_Rpc_TrackingServer_TrackingPointCommandResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.tracking_server.TrackingServerService/SubscribeTrackingPointCommand",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeTrackingPointCommandInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to incoming tracking rectangle command.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeTrackingRectangleCommand.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeTrackingRectangleCommand(
    _ request: Mavsdk_Rpc_TrackingServer_SubscribeTrackingRectangleCommandRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_TrackingServer_TrackingRectangleCommandResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_TrackingServer_SubscribeTrackingRectangleCommandRequest, Mavsdk_Rpc_TrackingServer_TrackingRectangleCommandResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.tracking_server.TrackingServerService/SubscribeTrackingRectangleCommand",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeTrackingRectangleCommandInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to incoming tracking off command.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeTrackingOffCommand.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeTrackingOffCommand(
    _ request: Mavsdk_Rpc_TrackingServer_SubscribeTrackingOffCommandRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_TrackingServer_TrackingOffCommandResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_TrackingServer_SubscribeTrackingOffCommandRequest, Mavsdk_Rpc_TrackingServer_TrackingOffCommandResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.tracking_server.TrackingServerService/SubscribeTrackingOffCommand",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeTrackingOffCommandInterceptors() ?? [],
      handler: handler
    )
  }

  /// Respond to an incoming tracking point command.
  ///
  /// - Parameters:
  ///   - request: Request to send to RespondTrackingPointCommand.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func respondTrackingPointCommand(
    _ request: Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandRequest, Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.tracking_server.TrackingServerService/RespondTrackingPointCommand",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRespondTrackingPointCommandInterceptors() ?? []
    )
  }

  /// Respond to an incoming tracking rectangle command.
  ///
  /// - Parameters:
  ///   - request: Request to send to RespondTrackingRectangleCommand.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func respondTrackingRectangleCommand(
    _ request: Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandRequest, Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.tracking_server.TrackingServerService/RespondTrackingRectangleCommand",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRespondTrackingRectangleCommandInterceptors() ?? []
    )
  }

  /// Respond to an incoming tracking off command.
  ///
  /// - Parameters:
  ///   - request: Request to send to RespondTrackingOffCommand.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func respondTrackingOffCommand(
    _ request: Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandRequest, Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.tracking_server.TrackingServerService/RespondTrackingOffCommand",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRespondTrackingOffCommandInterceptors() ?? []
    )
  }
}

internal protocol Mavsdk_Rpc_TrackingServer_TrackingServerServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setTrackingPointStatus'.
  func makeSetTrackingPointStatusInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusRequest, Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'setTrackingRectangleStatus'.
  func makeSetTrackingRectangleStatusInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusRequest, Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'setTrackingOffStatus'.
  func makeSetTrackingOffStatusInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusRequest, Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeTrackingPointCommand'.
  func makeSubscribeTrackingPointCommandInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_TrackingServer_SubscribeTrackingPointCommandRequest, Mavsdk_Rpc_TrackingServer_TrackingPointCommandResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeTrackingRectangleCommand'.
  func makeSubscribeTrackingRectangleCommandInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_TrackingServer_SubscribeTrackingRectangleCommandRequest, Mavsdk_Rpc_TrackingServer_TrackingRectangleCommandResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeTrackingOffCommand'.
  func makeSubscribeTrackingOffCommandInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_TrackingServer_SubscribeTrackingOffCommandRequest, Mavsdk_Rpc_TrackingServer_TrackingOffCommandResponse>]

  /// - Returns: Interceptors to use when invoking 'respondTrackingPointCommand'.
  func makeRespondTrackingPointCommandInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandRequest, Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandResponse>]

  /// - Returns: Interceptors to use when invoking 'respondTrackingRectangleCommand'.
  func makeRespondTrackingRectangleCommandInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandRequest, Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandResponse>]

  /// - Returns: Interceptors to use when invoking 'respondTrackingOffCommand'.
  func makeRespondTrackingOffCommandInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandRequest, Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandResponse>]
}

internal final class Mavsdk_Rpc_TrackingServer_TrackingServerServiceClient: Mavsdk_Rpc_TrackingServer_TrackingServerServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_TrackingServer_TrackingServerServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.tracking_server.TrackingServerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_TrackingServer_TrackingServerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// API for an onboard image tracking software.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_TrackingServer_TrackingServerServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_TrackingServer_TrackingServerServiceServerInterceptorFactoryProtocol? { get }

  /// Set/update the current point tracking status.
  func setTrackingPointStatus(request: Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusResponse>

  /// Set/update the current rectangle tracking status.
  func setTrackingRectangleStatus(request: Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusResponse>

  /// Set the current tracking status to off.
  func setTrackingOffStatus(request: Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusResponse>

  /// Subscribe to incoming tracking point command.
  func subscribeTrackingPointCommand(request: Mavsdk_Rpc_TrackingServer_SubscribeTrackingPointCommandRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_TrackingServer_TrackingPointCommandResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to incoming tracking rectangle command.
  func subscribeTrackingRectangleCommand(request: Mavsdk_Rpc_TrackingServer_SubscribeTrackingRectangleCommandRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_TrackingServer_TrackingRectangleCommandResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to incoming tracking off command.
  func subscribeTrackingOffCommand(request: Mavsdk_Rpc_TrackingServer_SubscribeTrackingOffCommandRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_TrackingServer_TrackingOffCommandResponse>) -> EventLoopFuture<GRPCStatus>

  /// Respond to an incoming tracking point command.
  func respondTrackingPointCommand(request: Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandResponse>

  /// Respond to an incoming tracking rectangle command.
  func respondTrackingRectangleCommand(request: Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandResponse>

  /// Respond to an incoming tracking off command.
  func respondTrackingOffCommand(request: Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandResponse>
}

extension Mavsdk_Rpc_TrackingServer_TrackingServerServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.tracking_server.TrackingServerService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetTrackingPointStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusResponse>(),
        interceptors: self.interceptors?.makeSetTrackingPointStatusInterceptors() ?? [],
        userFunction: self.setTrackingPointStatus(request:context:)
      )

    case "SetTrackingRectangleStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusResponse>(),
        interceptors: self.interceptors?.makeSetTrackingRectangleStatusInterceptors() ?? [],
        userFunction: self.setTrackingRectangleStatus(request:context:)
      )

    case "SetTrackingOffStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusResponse>(),
        interceptors: self.interceptors?.makeSetTrackingOffStatusInterceptors() ?? [],
        userFunction: self.setTrackingOffStatus(request:context:)
      )

    case "SubscribeTrackingPointCommand":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_TrackingServer_SubscribeTrackingPointCommandRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_TrackingServer_TrackingPointCommandResponse>(),
        interceptors: self.interceptors?.makeSubscribeTrackingPointCommandInterceptors() ?? [],
        userFunction: self.subscribeTrackingPointCommand(request:context:)
      )

    case "SubscribeTrackingRectangleCommand":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_TrackingServer_SubscribeTrackingRectangleCommandRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_TrackingServer_TrackingRectangleCommandResponse>(),
        interceptors: self.interceptors?.makeSubscribeTrackingRectangleCommandInterceptors() ?? [],
        userFunction: self.subscribeTrackingRectangleCommand(request:context:)
      )

    case "SubscribeTrackingOffCommand":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_TrackingServer_SubscribeTrackingOffCommandRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_TrackingServer_TrackingOffCommandResponse>(),
        interceptors: self.interceptors?.makeSubscribeTrackingOffCommandInterceptors() ?? [],
        userFunction: self.subscribeTrackingOffCommand(request:context:)
      )

    case "RespondTrackingPointCommand":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandResponse>(),
        interceptors: self.interceptors?.makeRespondTrackingPointCommandInterceptors() ?? [],
        userFunction: self.respondTrackingPointCommand(request:context:)
      )

    case "RespondTrackingRectangleCommand":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandResponse>(),
        interceptors: self.interceptors?.makeRespondTrackingRectangleCommandInterceptors() ?? [],
        userFunction: self.respondTrackingRectangleCommand(request:context:)
      )

    case "RespondTrackingOffCommand":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandResponse>(),
        interceptors: self.interceptors?.makeRespondTrackingOffCommandInterceptors() ?? [],
        userFunction: self.respondTrackingOffCommand(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_TrackingServer_TrackingServerServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setTrackingPointStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetTrackingPointStatusInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusRequest, Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusResponse>]

  /// - Returns: Interceptors to use when handling 'setTrackingRectangleStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetTrackingRectangleStatusInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusRequest, Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusResponse>]

  /// - Returns: Interceptors to use when handling 'setTrackingOffStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetTrackingOffStatusInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusRequest, Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeTrackingPointCommand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeTrackingPointCommandInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_TrackingServer_SubscribeTrackingPointCommandRequest, Mavsdk_Rpc_TrackingServer_TrackingPointCommandResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeTrackingRectangleCommand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeTrackingRectangleCommandInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_TrackingServer_SubscribeTrackingRectangleCommandRequest, Mavsdk_Rpc_TrackingServer_TrackingRectangleCommandResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeTrackingOffCommand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeTrackingOffCommandInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_TrackingServer_SubscribeTrackingOffCommandRequest, Mavsdk_Rpc_TrackingServer_TrackingOffCommandResponse>]

  /// - Returns: Interceptors to use when handling 'respondTrackingPointCommand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRespondTrackingPointCommandInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandRequest, Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandResponse>]

  /// - Returns: Interceptors to use when handling 'respondTrackingRectangleCommand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRespondTrackingRectangleCommandInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandRequest, Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandResponse>]

  /// - Returns: Interceptors to use when handling 'respondTrackingOffCommand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRespondTrackingOffCommandInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandRequest, Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandResponse>]
}
