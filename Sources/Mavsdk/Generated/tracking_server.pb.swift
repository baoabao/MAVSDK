// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tracking_server.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Answer to respond to an incoming command
enum Mavsdk_Rpc_TrackingServer_CommandAnswer: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Command accepted
  case accepted // = 0

  /// Command temporarily rejected
  case temporarilyRejected // = 1

  /// Command denied
  case denied // = 2

  /// Command unsupported
  case unsupported // = 3

  /// Command failed
  case failed // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .accepted
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .accepted
    case 1: self = .temporarilyRejected
    case 2: self = .denied
    case 3: self = .unsupported
    case 4: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .accepted: return 0
    case .temporarilyRejected: return 1
    case .denied: return 2
    case .unsupported: return 3
    case .failed: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Mavsdk_Rpc_TrackingServer_CommandAnswer: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Mavsdk_Rpc_TrackingServer_CommandAnswer] = [
    .accepted,
    .temporarilyRejected,
    .denied,
    .unsupported,
    .failed,
  ]
}

#endif  // swift(>=4.2)

struct Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The tracked point
  var trackedPoint: Mavsdk_Rpc_TrackingServer_TrackPoint {
    get {return _trackedPoint ?? Mavsdk_Rpc_TrackingServer_TrackPoint()}
    set {_trackedPoint = newValue}
  }
  /// Returns true if `trackedPoint` has been explicitly set.
  var hasTrackedPoint: Bool {return self._trackedPoint != nil}
  /// Clears the value of `trackedPoint`. Subsequent reads from it will return its default value.
  mutating func clearTrackedPoint() {self._trackedPoint = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _trackedPoint: Mavsdk_Rpc_TrackingServer_TrackPoint? = nil
}

struct Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The tracked rectangle
  var trackedRectangle: Mavsdk_Rpc_TrackingServer_TrackRectangle {
    get {return _trackedRectangle ?? Mavsdk_Rpc_TrackingServer_TrackRectangle()}
    set {_trackedRectangle = newValue}
  }
  /// Returns true if `trackedRectangle` has been explicitly set.
  var hasTrackedRectangle: Bool {return self._trackedRectangle != nil}
  /// Clears the value of `trackedRectangle`. Subsequent reads from it will return its default value.
  mutating func clearTrackedRectangle() {self._trackedRectangle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _trackedRectangle: Mavsdk_Rpc_TrackingServer_TrackRectangle? = nil
}

struct Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_TrackingServer_SubscribeTrackingPointCommandRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_TrackingServer_TrackingPointCommandResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The point to track if a point is to be tracked
  var trackPoint: Mavsdk_Rpc_TrackingServer_TrackPoint {
    get {return _trackPoint ?? Mavsdk_Rpc_TrackingServer_TrackPoint()}
    set {_trackPoint = newValue}
  }
  /// Returns true if `trackPoint` has been explicitly set.
  var hasTrackPoint: Bool {return self._trackPoint != nil}
  /// Clears the value of `trackPoint`. Subsequent reads from it will return its default value.
  mutating func clearTrackPoint() {self._trackPoint = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _trackPoint: Mavsdk_Rpc_TrackingServer_TrackPoint? = nil
}

struct Mavsdk_Rpc_TrackingServer_SubscribeTrackingRectangleCommandRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_TrackingServer_TrackingRectangleCommandResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The point to track if a point is to be tracked
  var trackRectangle: Mavsdk_Rpc_TrackingServer_TrackRectangle {
    get {return _trackRectangle ?? Mavsdk_Rpc_TrackingServer_TrackRectangle()}
    set {_trackRectangle = newValue}
  }
  /// Returns true if `trackRectangle` has been explicitly set.
  var hasTrackRectangle: Bool {return self._trackRectangle != nil}
  /// Clears the value of `trackRectangle`. Subsequent reads from it will return its default value.
  mutating func clearTrackRectangle() {self._trackRectangle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _trackRectangle: Mavsdk_Rpc_TrackingServer_TrackRectangle? = nil
}

struct Mavsdk_Rpc_TrackingServer_SubscribeTrackingOffCommandRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_TrackingServer_TrackingOffCommandResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unused
  var dummy: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ack to answer to the incoming command
  var commandAnswer: Mavsdk_Rpc_TrackingServer_CommandAnswer = .accepted

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The result of sending the response.
  var trackingServerResult: Mavsdk_Rpc_TrackingServer_TrackingServerResult {
    get {return _trackingServerResult ?? Mavsdk_Rpc_TrackingServer_TrackingServerResult()}
    set {_trackingServerResult = newValue}
  }
  /// Returns true if `trackingServerResult` has been explicitly set.
  var hasTrackingServerResult: Bool {return self._trackingServerResult != nil}
  /// Clears the value of `trackingServerResult`. Subsequent reads from it will return its default value.
  mutating func clearTrackingServerResult() {self._trackingServerResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _trackingServerResult: Mavsdk_Rpc_TrackingServer_TrackingServerResult? = nil
}

struct Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ack to answer to the incoming command
  var commandAnswer: Mavsdk_Rpc_TrackingServer_CommandAnswer = .accepted

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The result of sending the response.
  var trackingServerResult: Mavsdk_Rpc_TrackingServer_TrackingServerResult {
    get {return _trackingServerResult ?? Mavsdk_Rpc_TrackingServer_TrackingServerResult()}
    set {_trackingServerResult = newValue}
  }
  /// Returns true if `trackingServerResult` has been explicitly set.
  var hasTrackingServerResult: Bool {return self._trackingServerResult != nil}
  /// Clears the value of `trackingServerResult`. Subsequent reads from it will return its default value.
  mutating func clearTrackingServerResult() {self._trackingServerResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _trackingServerResult: Mavsdk_Rpc_TrackingServer_TrackingServerResult? = nil
}

struct Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ack to answer to the incoming command
  var commandAnswer: Mavsdk_Rpc_TrackingServer_CommandAnswer = .accepted

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The result of sending the response.
  var trackingServerResult: Mavsdk_Rpc_TrackingServer_TrackingServerResult {
    get {return _trackingServerResult ?? Mavsdk_Rpc_TrackingServer_TrackingServerResult()}
    set {_trackingServerResult = newValue}
  }
  /// Returns true if `trackingServerResult` has been explicitly set.
  var hasTrackingServerResult: Bool {return self._trackingServerResult != nil}
  /// Clears the value of `trackingServerResult`. Subsequent reads from it will return its default value.
  mutating func clearTrackingServerResult() {self._trackingServerResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _trackingServerResult: Mavsdk_Rpc_TrackingServer_TrackingServerResult? = nil
}

/// Point description type
struct Mavsdk_Rpc_TrackingServer_TrackPoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Point to track x value (normalized 0..1, 0 is left, 1 is right).
  var pointX: Float = 0

  /// Point to track y value (normalized 0..1, 0 is top, 1 is bottom).
  var pointY: Float = 0

  /// Point to track y value (normalized 0..1, 0 is top, 1 is bottom).
  var radius: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Rectangle description type
struct Mavsdk_Rpc_TrackingServer_TrackRectangle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
  var topLeftCornerX: Float = 0

  /// Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
  var topLeftCornerY: Float = 0

  /// Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
  var bottomRightCornerX: Float = 0

  /// Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
  var bottomRightCornerY: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Result type
struct Mavsdk_Rpc_TrackingServer_TrackingServerResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Result enum value
  var result: Mavsdk_Rpc_TrackingServer_TrackingServerResult.Result = .unknown

  /// Human-readable English string describing the result
  var resultStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible results returned for tracking_server requests.
  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Unknown result
    case unknown // = 0

    /// Request succeeded
    case success // = 1

    /// No system is connected
    case noSystem // = 2

    /// Connection error
    case connectionError // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .success
      case 2: self = .noSystem
      case 3: self = .connectionError
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .success: return 1
      case .noSystem: return 2
      case .connectionError: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Mavsdk_Rpc_TrackingServer_TrackingServerResult.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Mavsdk_Rpc_TrackingServer_TrackingServerResult.Result] = [
    .unknown,
    .success,
    .noSystem,
    .connectionError,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mavsdk.rpc.tracking_server"

extension Mavsdk_Rpc_TrackingServer_CommandAnswer: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMMAND_ANSWER_ACCEPTED"),
    1: .same(proto: "COMMAND_ANSWER_TEMPORARILY_REJECTED"),
    2: .same(proto: "COMMAND_ANSWER_DENIED"),
    3: .same(proto: "COMMAND_ANSWER_UNSUPPORTED"),
    4: .same(proto: "COMMAND_ANSWER_FAILED"),
  ]
}

extension Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetTrackingPointStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tracked_point"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._trackedPoint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._trackedPoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusRequest, rhs: Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusRequest) -> Bool {
    if lhs._trackedPoint != rhs._trackedPoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetTrackingPointStatusResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusResponse, rhs: Mavsdk_Rpc_TrackingServer_SetTrackingPointStatusResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetTrackingRectangleStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tracked_rectangle"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._trackedRectangle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._trackedRectangle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusRequest, rhs: Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusRequest) -> Bool {
    if lhs._trackedRectangle != rhs._trackedRectangle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetTrackingRectangleStatusResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusResponse, rhs: Mavsdk_Rpc_TrackingServer_SetTrackingRectangleStatusResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetTrackingOffStatusRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusRequest, rhs: Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetTrackingOffStatusResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusResponse, rhs: Mavsdk_Rpc_TrackingServer_SetTrackingOffStatusResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_SubscribeTrackingPointCommandRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeTrackingPointCommandRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_SubscribeTrackingPointCommandRequest, rhs: Mavsdk_Rpc_TrackingServer_SubscribeTrackingPointCommandRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_TrackingPointCommandResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrackingPointCommandResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "track_point"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._trackPoint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._trackPoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_TrackingPointCommandResponse, rhs: Mavsdk_Rpc_TrackingServer_TrackingPointCommandResponse) -> Bool {
    if lhs._trackPoint != rhs._trackPoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_SubscribeTrackingRectangleCommandRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeTrackingRectangleCommandRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_SubscribeTrackingRectangleCommandRequest, rhs: Mavsdk_Rpc_TrackingServer_SubscribeTrackingRectangleCommandRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_TrackingRectangleCommandResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrackingRectangleCommandResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "track_rectangle"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._trackRectangle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._trackRectangle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_TrackingRectangleCommandResponse, rhs: Mavsdk_Rpc_TrackingServer_TrackingRectangleCommandResponse) -> Bool {
    if lhs._trackRectangle != rhs._trackRectangle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_SubscribeTrackingOffCommandRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeTrackingOffCommandRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_SubscribeTrackingOffCommandRequest, rhs: Mavsdk_Rpc_TrackingServer_SubscribeTrackingOffCommandRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_TrackingOffCommandResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrackingOffCommandResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dummy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.dummy) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dummy != 0 {
      try visitor.visitSingularInt32Field(value: self.dummy, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_TrackingOffCommandResponse, rhs: Mavsdk_Rpc_TrackingServer_TrackingOffCommandResponse) -> Bool {
    if lhs.dummy != rhs.dummy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RespondTrackingPointCommandRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_answer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.commandAnswer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.commandAnswer != .accepted {
      try visitor.visitSingularEnumField(value: self.commandAnswer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandRequest, rhs: Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandRequest) -> Bool {
    if lhs.commandAnswer != rhs.commandAnswer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RespondTrackingPointCommandResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tracking_server_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._trackingServerResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._trackingServerResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandResponse, rhs: Mavsdk_Rpc_TrackingServer_RespondTrackingPointCommandResponse) -> Bool {
    if lhs._trackingServerResult != rhs._trackingServerResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RespondTrackingRectangleCommandRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_answer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.commandAnswer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.commandAnswer != .accepted {
      try visitor.visitSingularEnumField(value: self.commandAnswer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandRequest, rhs: Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandRequest) -> Bool {
    if lhs.commandAnswer != rhs.commandAnswer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RespondTrackingRectangleCommandResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tracking_server_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._trackingServerResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._trackingServerResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandResponse, rhs: Mavsdk_Rpc_TrackingServer_RespondTrackingRectangleCommandResponse) -> Bool {
    if lhs._trackingServerResult != rhs._trackingServerResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RespondTrackingOffCommandRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_answer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.commandAnswer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.commandAnswer != .accepted {
      try visitor.visitSingularEnumField(value: self.commandAnswer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandRequest, rhs: Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandRequest) -> Bool {
    if lhs.commandAnswer != rhs.commandAnswer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RespondTrackingOffCommandResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tracking_server_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._trackingServerResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._trackingServerResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandResponse, rhs: Mavsdk_Rpc_TrackingServer_RespondTrackingOffCommandResponse) -> Bool {
    if lhs._trackingServerResult != rhs._trackingServerResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_TrackPoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrackPoint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "point_x"),
    2: .standard(proto: "point_y"),
    3: .same(proto: "radius"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.pointX) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.pointY) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.radius) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pointX != 0 {
      try visitor.visitSingularFloatField(value: self.pointX, fieldNumber: 1)
    }
    if self.pointY != 0 {
      try visitor.visitSingularFloatField(value: self.pointY, fieldNumber: 2)
    }
    if self.radius != 0 {
      try visitor.visitSingularFloatField(value: self.radius, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_TrackPoint, rhs: Mavsdk_Rpc_TrackingServer_TrackPoint) -> Bool {
    if lhs.pointX != rhs.pointX {return false}
    if lhs.pointY != rhs.pointY {return false}
    if lhs.radius != rhs.radius {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_TrackRectangle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrackRectangle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "top_left_corner_x"),
    2: .standard(proto: "top_left_corner_y"),
    3: .standard(proto: "bottom_right_corner_x"),
    4: .standard(proto: "bottom_right_corner_y"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.topLeftCornerX) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.topLeftCornerY) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.bottomRightCornerX) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.bottomRightCornerY) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.topLeftCornerX != 0 {
      try visitor.visitSingularFloatField(value: self.topLeftCornerX, fieldNumber: 1)
    }
    if self.topLeftCornerY != 0 {
      try visitor.visitSingularFloatField(value: self.topLeftCornerY, fieldNumber: 2)
    }
    if self.bottomRightCornerX != 0 {
      try visitor.visitSingularFloatField(value: self.bottomRightCornerX, fieldNumber: 3)
    }
    if self.bottomRightCornerY != 0 {
      try visitor.visitSingularFloatField(value: self.bottomRightCornerY, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_TrackRectangle, rhs: Mavsdk_Rpc_TrackingServer_TrackRectangle) -> Bool {
    if lhs.topLeftCornerX != rhs.topLeftCornerX {return false}
    if lhs.topLeftCornerY != rhs.topLeftCornerY {return false}
    if lhs.bottomRightCornerX != rhs.bottomRightCornerX {return false}
    if lhs.bottomRightCornerY != rhs.bottomRightCornerY {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_TrackingServerResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrackingServerResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "result_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resultStr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.resultStr.isEmpty {
      try visitor.visitSingularStringField(value: self.resultStr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_TrackingServer_TrackingServerResult, rhs: Mavsdk_Rpc_TrackingServer_TrackingServerResult) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.resultStr != rhs.resultStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_TrackingServer_TrackingServerResult.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESULT_UNKNOWN"),
    1: .same(proto: "RESULT_SUCCESS"),
    2: .same(proto: "RESULT_NO_SYSTEM"),
    3: .same(proto: "RESULT_CONNECTION_ERROR"),
  ]
}
