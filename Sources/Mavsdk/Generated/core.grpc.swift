//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: core.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Access to the connection state and running plugins.
///
/// Usage: instantiate `Mavsdk_Rpc_Core_CoreServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Core_CoreServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_Core_CoreServiceClientInterceptorFactoryProtocol? { get }

  func subscribeConnectionState(
    _ request: Mavsdk_Rpc_Core_SubscribeConnectionStateRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Core_ConnectionStateResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Core_SubscribeConnectionStateRequest, Mavsdk_Rpc_Core_ConnectionStateResponse>

  func listRunningPlugins(
    _ request: Mavsdk_Rpc_Core_ListRunningPluginsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Core_ListRunningPluginsRequest, Mavsdk_Rpc_Core_ListRunningPluginsResponse>
}

extension Mavsdk_Rpc_Core_CoreServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.core.CoreService"
  }

  /// Subscribe to 'connection state' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeConnectionState.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeConnectionState(
    _ request: Mavsdk_Rpc_Core_SubscribeConnectionStateRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Core_ConnectionStateResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Core_SubscribeConnectionStateRequest, Mavsdk_Rpc_Core_ConnectionStateResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.core.CoreService/SubscribeConnectionState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeConnectionStateInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get a list of currently running plugins.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListRunningPlugins.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listRunningPlugins(
    _ request: Mavsdk_Rpc_Core_ListRunningPluginsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Core_ListRunningPluginsRequest, Mavsdk_Rpc_Core_ListRunningPluginsResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.core.CoreService/ListRunningPlugins",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListRunningPluginsInterceptors() ?? []
    )
  }
}

internal protocol Mavsdk_Rpc_Core_CoreServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'subscribeConnectionState'.
  func makeSubscribeConnectionStateInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Core_SubscribeConnectionStateRequest, Mavsdk_Rpc_Core_ConnectionStateResponse>]

  /// - Returns: Interceptors to use when invoking 'listRunningPlugins'.
  func makeListRunningPluginsInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Core_ListRunningPluginsRequest, Mavsdk_Rpc_Core_ListRunningPluginsResponse>]
}

internal final class Mavsdk_Rpc_Core_CoreServiceClient: Mavsdk_Rpc_Core_CoreServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_Core_CoreServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.core.CoreService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_Core_CoreServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Access to the connection state and running plugins.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_Core_CoreServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_Core_CoreServiceServerInterceptorFactoryProtocol? { get }

  /// Subscribe to 'connection state' updates.
  func subscribeConnectionState(request: Mavsdk_Rpc_Core_SubscribeConnectionStateRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Core_ConnectionStateResponse>) -> EventLoopFuture<GRPCStatus>

  /// Get a list of currently running plugins.
  func listRunningPlugins(request: Mavsdk_Rpc_Core_ListRunningPluginsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Core_ListRunningPluginsResponse>
}

extension Mavsdk_Rpc_Core_CoreServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.core.CoreService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SubscribeConnectionState":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Core_SubscribeConnectionStateRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Core_ConnectionStateResponse>(),
        interceptors: self.interceptors?.makeSubscribeConnectionStateInterceptors() ?? [],
        userFunction: self.subscribeConnectionState(request:context:)
      )

    case "ListRunningPlugins":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Core_ListRunningPluginsRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Core_ListRunningPluginsResponse>(),
        interceptors: self.interceptors?.makeListRunningPluginsInterceptors() ?? [],
        userFunction: self.listRunningPlugins(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_Core_CoreServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'subscribeConnectionState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeConnectionStateInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Core_SubscribeConnectionStateRequest, Mavsdk_Rpc_Core_ConnectionStateResponse>]

  /// - Returns: Interceptors to use when handling 'listRunningPlugins'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListRunningPluginsInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Core_ListRunningPluginsRequest, Mavsdk_Rpc_Core_ListRunningPluginsResponse>]
}
